This is vcdimager.info, produced by makeinfo version 4.0b from
vcdimager.texi.

   This file documents GNU VCDImager, The GNU Video CD Authoring Tools.

   Copyright (C) Herbert Valerio Riedel <<hvr@gnu.org>>



   Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, one Front-Cover Text: "GNU VCDImager by Herbert
Valerio Riedel et al." and one Back-Cover Text: "GNU VCDImager can be
obtained at `http://www.gnu.org/software/vcdimager/'. The author is
reachable at <hvr@gnu.org>".  A copy of the license is included in the
section entitled "GNU Free Documentation License".

INFO-DIR-SECTION Miscellaneous
START-INFO-DIR-ENTRY
* GNU VCDImager: (vcdimager).                   GNU Video CD imaging utilities
* vcddebug: (vcdimager).                        Video CD debugging tool
* vcdxgen: (vcdimager).                         Video CD XML template generator
* vcdxbuild: (vcdimager).                       Video CD XML formatter
* vcdxrip: (vcdimager).                         Video CD XML dis-assembler
END-INFO-DIR-ENTRY


File: vcdimager.info,  Node: <pvd> Container,  Next: <filesystem> Container,  Prev: <info> Container,  Up: <videocd> Root

`<pvd>' Container
-----------------

     <!ELEMENT pvd                           (volume-id?,
                                              system-id?,
                                              application-id?,
                                              preparer-id?,
                                              publisher-id?)>
     
     <!ELEMENT volume-id                     (#PCDATA)>
     <!ELEMENT system-id                     (#PCDATA)>
     <!ELEMENT application-id                (#PCDATA)>
     <!ELEMENT preparer-id                   (#PCDATA)>
     <!ELEMENT publisher-id                  (#PCDATA)>

   This part of the XML structure describes the primary volume
descriptor of the disc.

`<volume-id>'
     Volume label of the CD-ROM. Content restricted to upto 32
     d-characters, *Note ISO646 d-Characters::. This is label usually
     shows up on computer systems as volume label.

`<system-id>'
     System id of the CD-ROM. Content restricted to up to 32
     a-characters. Should be set to `CD-RTOS CD-BRIDGE' for Video CD's
     for CD-i compatibility.  This fields content is ignored by
     vcdimager and always set to `CD-RTOS CD-BRIDGE'.

`<application-id>'
     Defines the application pathname for CD-i playing devices.

`<preparer-id>'
     This field is used by vcdimager to put a version string on the
     Video CD, regardless of the content given in the XML description
     which is ignored.

`<publisher-id>'
     Data Preparer Identifier for the CD-ROM. Content restricted to up
     to 128 a-characters*Note ISO646 a-Characters::.

     ...
       <pvd>
         <volume-id>GNU_WARS_EP9_1_OF_2</volume-id>
         <system-id>CD-RTOS CD-BRIDGE</system-id>
         <publisher-id>John Doe</publisher-id>
       </pvd>
     ...


File: vcdimager.info,  Node: <filesystem> Container,  Next: <segment-items> Container,  Prev: <pvd> Container,  Up: <videocd> Root

`<filesystem>' Container
------------------------

* Menu:

* <folder> Element/Container::
* <file> Element/Container::

     <!ELEMENT filesystem                    (folder*,
                                              file*)>

   This section of the XML description allows for the creation of
additional folders and files into the ISO-9660 filesystem on the Video
CD. *Note Adding Files to the Video CD::.


File: vcdimager.info,  Node: <folder> Element/Container,  Next: <file> Element/Container,  Prev: <filesystem> Container,  Up: <filesystem> Container

`<folder>' Element/Container
............................

     <!ELEMENT folder                        (name,
                                              folder*,
                                              file*)>
     
     <!ELEMENT name                          (#PCDATA)>

`<name>'
     Directory name in the ISO-9660 domain.

     ...
       <filesystem>
         <folder>
           <name>CDI</name>
           <file src=...>
     ...
         </folder>
       </filesystem>
     ...


File: vcdimager.info,  Node: <file> Element/Container,  Prev: <folder> Element/Container,  Up: <filesystem> Container

`<file>' Element
................

     <!ELEMENT file                          (name)>
     <!ATTLIST file
       src          %URI;  #REQUIRED
       format       (form1|mixed) "form1"
     >
     <!ELEMENT name                          (#PCDATA)>

`<name>'
     Filename in the ISO-9660 domain.

`src'
     Source location of the file.

`format'
     Whether file is an ordinary `form1' file, or a `mixed' form
     real-time file containing the sector information in 2336 byte
     blocks.

     ...
         <folder>
           <name>CDI</name>
           <file src="/usr/share/cdi/cdi_imag.rtf" format="mixed">
             <name>CDI_IMAG.RTF</name>
           </file>
           <file src="/usr/share/cdi/cdi_text.fnt">
             <name>CDI_TEXT.FNT</name>
           </file>
     ...


File: vcdimager.info,  Node: <segment-items> Container,  Next: <sequence-items> Container,  Prev: <filesystem> Container,  Up: <videocd> Root

`<segment-items>' Container
---------------------------

* Menu:

* <segment-item> Element::

     <!ELEMENT segment-items                 (segment-item)+>

   Only supported for Video CD 2.0, Super Video CD 1.0 and HQ Video CD
1.0.


File: vcdimager.info,  Node: <segment-item> Element,  Prev: <segment-items> Container,  Up: <segment-items> Container

`<segment-item>' Element
........................

     <!ELEMENT segment-item                  (auto-pause)*>
     <!ATTLIST segment-item
       id           ID     #REQUIRED
       src          %URI;  #REQUIRED
     >
     
     <!ELEMENT auto-pause                    (#PCDATA)>

`<segment-item>'
     Element representing a segment item. Segment play items need to be
     referenced from the `<pbc>' section in order to be accessible at
     all.

`id'
     Id string to be referenced in `ref' attributes.

`src'
     This attribute specifies the external file name of the item, i.e.
     the location of the file containing the MPEG stream to be included.

`<auto-pause>'
     See description in `<sequence-item>'.

     ...
       <segment-items>
     ...
         <segment-item src="stills/splash.mpg" id="seg-still-splash" />
     
         <segment-item src="animations/intro.mpg" id="seg-animation-intro" />
     
         <segment-item src="animations/intra.mpg" id="seg-animation-intra" />
     
         <segment-item src="animations/extro.mpg" id="seg-animation-extro" />
     ...
       <segment-items>
     ...


File: vcdimager.info,  Node: <sequence-items> Container,  Next: <pbc> Container,  Prev: <segment-items> Container,  Up: <videocd> Root

`<sequence-items>' Container
----------------------------

* Menu:

* <sequence-item> Element::

     <!ELEMENT sequence-items                (sequence-item)+>


File: vcdimager.info,  Node: <sequence-item> Element,  Prev: <sequence-items> Container,  Up: <sequence-items> Container

`<sequence-item>' Element
.........................

     <!ELEMENT sequence-item                 (default-entry?,
                                              entry*,
                                              auto-pause*)>
     <!ATTLIST sequence-item
       id           ID     #IMPLIED
       src          %URI;  #REQUIRED
     >
     
     <!ELEMENT auto-pause                    (#PCDATA)>
     
     <!ELEMENT default-entry EMPTY>
     <!ATTLIST default-entry
       id           ID     #REQUIRED
     >
     
     <!ELEMENT entry                         (#PCDATA)>
     <!ATTLIST entry
       id           ID     #IMPLIED
     >

`<sequence-item>'
     Element representing a sequence item. Each sequence item
     corresponds to a single track in the resulting disc.

`id'
     ID value referenced in `ref' attributes.

`src'
     This attribute specifies the external file name of the item, i.e.
     MPEG stream, to be included.

`<auto-pause>'
     This element specifies where to insert auto pause points, whose
     wait time is controlled by play lists' `<autowait>'. The time is
     given in seconds from the beginning of the sequence.

`<default-entry>'
     Represents the mandatory default entry point pointing to the start
     of the sequence(1).

`<entry>'
     Defines an additional entry point into the sequence item. Up to 99
     entry points (including the default entry point) can be defined
     per sequence, while only a maximum of 500 entry points(2) can be
     present in the whole disc. The entry point time is given in
     seconds from the beginning of the sequence.  If referenced from
     PBC the sequence which contains the entry point is played from the
     entry point to the end of the sequence (_not_ to the next entry
     point!). *Note Access Point Sectors::.

`id'
     Play item ID value referenced in `ref' attributes.

     ...
       <sequence-items>
     ...
         <sequence-item src="videos/movie.mpg" id="seq-movie">
           <default-entry id="ent-movie-0" />
           <entry id="ent-movie-1">90.32</entry>
           <entry id="ent-movie-2">710</entry>
           <entry id="ent-movie-3">1760.5</entry>
           <entry id="ent-movie-4">3050</entry>
         </sequence-item>
     
         <sequence-item src="videos/trailer1.mpg" id="seq-trailer-1" />
     
         <sequence-item src="videos/trailer2.mpg" id="seq-trailer-2">
           <auto-pause>15.300</auto-pause>
           <auto-pause>260.7</auto-pause>
         </sequence-item>
     ...
       <sequence-items>
     ...

   ---------- Footnotes ----------

   (1) Referencing the default entry point id should be equivalent to
referencing the sequence id. Depending on the firmware of the playing
device, the sequence id may reflect the start of the sequence as
defined by the TOC, while the default entry id gets defined by the
address defined in the `ENTRY.VCD' or `ENTRY.SVD'

   (2) every sequence point has automatically an entry point defined,
which must be subtracted from the maximum of 500 entry points


File: vcdimager.info,  Node: <pbc> Container,  Prev: <sequence-items> Container,  Up: <videocd> Root

`<pbc>' Container
-----------------

* Menu:

* <selection> Element::
* <playlist> Element::
* <endlist> Element::

     <!ELEMENT pbc                           (selection|
                                              playlist|
                                              endlist)+>
     
     <!ENTITY % pbcattrs
     " id           ID     #REQUIRED
       rejected     (true|false) 'false'"
     >
     
     <!ENTITY % XY "CDATA">
     
     <!ENTITY % ofsattrs
     " ref          IDREF  #REQUIRED
       x1           %XY;   #IMPLIED
       y1           %XY;   #IMPLIED
       x2           %XY;   #IMPLIED
       y2           %XY;   #IMPLIED"
     >
     
     <!ELEMENT play-item                      EMPTY>
     <!ATTLIST play-item
       ref          IDREF  #IMPLIED
     >

   `<pbc>' container and sub-elements only supported for Video CD 2.0,
Super Video CD 1.0 and HQ Video CD 1.0.

`id'
     ID value referenced in `ref' attributes.

`rejected'
     Attribute controlling, whether item is not listed, i.e. _rejected_,
     in the LOT. Lists which are not rejected may be--if supported by
     the playing device--select-able by user input of the automatically
     assigned _List ID Number_. It is recommended to enable the rejected
     property for but the very first PBC list, in order to make the
     _unreferenced item check_ work better.  The first PBC Item must not
     be rejected.

`x1 y1 x2 y2'
     Screen Co-ordinates for selection hotspot areas (only supported for
     `<selection>' members), with `0,0' being the upper left and
     `255,255' being the lower right screen point. `x1' and `y1' are
     required to be less than `x2' and `y2' respectively. *Note
     Selection List::.

`play-item'
     This empty element is used to reference play item ids. If the `ref'
     attribute is ommitted (e.g. `<play-item />', the _play nothing
     item_ is implicitly referenced.


File: vcdimager.info,  Node: <selection> Element,  Next: <playlist> Element,  Prev: <pbc> Container,  Up: <pbc> Container

`<selection>' Element
.....................

     <!ELEMENT selection                     (bsn?,
                                              prev?,
                                              next?,
                                              return?,
                                              (multi-default|default)?,
                                              timeout?,
                                              wait?,
                                              loop?,
                                              play-item?,
                                              select*)>
     <!ATTLIST selection
       %pbcattrs;
     >
     
     <!ELEMENT      bsn                      (#PCDATA)>
     <!ELEMENT      prev                     EMPTY>
     <!ELEMENT      next                     EMPTY>
     <!ELEMENT      return                   EMPTY>
     
     <!ELEMENT      default                  EMPTY>
     <!ELEMENT      multi-default            EMPTY>
     <!ATTLIST multi-default
       numeric      (enabled|disabled)  'enabled'
     >
     
     <!ELEMENT      timeout                  EMPTY>
     <!ELEMENT      wait                     (#PCDATA)>
     
     <!ELEMENT      loop                     (#PCDATA)>
     <!ATTLIST loop
       jump-timing  (immediate|delayed) 'immediate'
     >
     
     <!ELEMENT      play-item                EMPTY>
     <!ELEMENT      select                   EMPTY>

`<bsn>'
     Base selection number, the numeric value which is taken as the
     first selection number. The default is `1' and the allowed range
     goes from 1 upto 99.

`<prev>'
     Target list id jumped to on <PREVIOUS> key press.

`<next>'
     Target list id jumped to on <NEXT> key press.

`<return>'
     Target list id jumped to on <RETURN> key press.

`<default>'
     Target list id jumped to on <DEFAULT> key press. May not be present
     at the same time with the following element.

     If a `<default>' target is defined, `<loop>' should not be set to
     loop forever (`0') nor shall `<wait>' indicate an infinite
     time-out wait time, otherwise the target will be unreachable.

`<multi-default>'
     When present, causes the selection list to be a multi default
     selection list, i.e. that the target list id of the <DEFAULT>
     depends on which part of the sequence item is playing. The
     `numeric' attributes, if _disabled_, allows to disable the
     <NUMERIC> keys. When using multi default selections, the `<bsn>'
     must be set to 1 and the number of selection must match the number
     of all entry points of the sequence referenced by `<play-item>'.

`<timeout>'
     Target list id to be jumped on time-out of `<wait>'. If omitted
     (and `<wait>' is not set to an infinite time) one of the
     `<select>' targets is selected at random!

`<wait>'
     Time in seconds to wait after playback of `<play-item>' before
     triggering the `<timeout>' action (unless the user triggers some
     action before time ran up). Default: `0'.

`<loop>'
     Times to repeat the playback of `<play-item>'. the `jump-timing'
     attribute controls whether the playback of `<play-item>' is
     finished, thus _delayed_, before executing user triggered action
     or an _immediate_ jump is performed. After the specified amount of
     repetitions are completed, the `<wait>' time begins to count down,
     unless set to an infinite wait time by setting it to the value
     `0'. If this element is omitted, a default of `1' is used, i.e.
     the `<play-item>' will be displayed once. The default for the
     `jump-timing' is IMMEDIATE.

     When the `jump-timing' is set to _delayed_, it is recommended that
     the length of the referenced `<play-item>' is not more than 5
     seconds. The recommended setting for a play item consisting of one
     still picture and no audio is to loop once and have a _delayed_
     `jump-timing'.

`<play-item>'
     The _play item_ to be played while waiting for user intervention.

`<select>'
     Target list id(s) jumped to on <NUMERIC> key presses. There may be
     up to 99 select choices. The sum of `<bsn>' and the number of
     `<select>' elements per `<selection>' must not be greater than 100.


File: vcdimager.info,  Node: <playlist> Element,  Next: <endlist> Element,  Prev: <selection> Element,  Up: <pbc> Container

`<playlist>' Element
....................

     <!ELEMENT playlist                      (prev?,
                                              next?,
                                              return?,
                                              playtime?,
                                              wait?,
                                              autowait?,
                                              play-item+)>
     <!ATTLIST playlist
       %pbcattrs;
     >
     
     <!ELEMENT      prev                     EMPTY>
     <!ELEMENT      next                     EMPTY>
     <!ELEMENT      return                   EMPTY>
     <!ELEMENT      playtime                 (#PCDATA)>
     <!ELEMENT      wait                     (#PCDATA)>
     <!ELEMENT      autowait                 (#PCDATA)>
     <!ELEMENT      play-item                EMPTY>

`<prev>'
     Target list id jumped to on <PREVIOUS> key press.

`<next>'
     Target list id jumped to on <NEXT> key press.

`<return>'
     Target list id jumped to on <RETURN> key press.

`<playtime>'
     The amount of seconds to play of every `<play-item>'. The given
     time value is rounded to 1/15 second units. The allowed range has a
     maximum value of `4369.0' seconds, values equal or less than `0'
     cause each `<play-item>' to be played to its end.  Default: `0'

`<wait>'
     Time in seconds to wait after each playback of `<play-item>' before
     proceding. Default: `0'.

`<autowait>'
     Time in seconds to wait at each defined `<auto-pause>' point for
     sequence items referenced in this play list. Default: `0'.

`<play-item>'
     The _play item(s)_ to play in order. Up to 255 `<play-item>'
     elements may be defined per `<playlist>'.

     ...
       <pbc>
     ...
         <playlist id="play-trailers">
           <prev ref="select-specialfeaturemenu"/>
           <next ref="select-specialfeaturemenu"/>
           <return ref="select-specialfeaturemenu"/>
           <wait>0</wait>
           <autowait>0</autowait>
           <play-item ref="seg-animation-intro"/>
           <play-item ref="seq-trailer-1"/>
           <play-item ref="seg-animation-intra"/>
           <play-item ref="seq-trailer-2"/>
           <play-item ref="seg-animation-intra"/>
           <play-item ref="seq-trailer-3"/>
           <play-item ref="seg-animation-extro"/>
         </playlist>
     ...
       </pbc>
     </videocd>
     ...


File: vcdimager.info,  Node: <endlist> Element,  Prev: <playlist> Element,  Up: <pbc> Container

`<endlist>' Element
...................

     <!ELEMENT endlist                       (next-volume?,
                                              play-item?)>
     <!ATTLIST endlist
       %pbcattrs;
     >
     
     <!ELEMENT next-volume                   (#PCDATA)>

The following elements are only supported for Super Video CD 1.0 and HQ
Video CD 1.0.

`<next-volume>'
     Only supported for Super Video CD's. If set to _0_ stop PBC
     intepretation, otherwise switch to the selected volume number.

`<play-item>'
     Only supported for Super Video CD's. Displays the referenced image
     while waiting for a volume change. Referenced play item shall be a
     still picture.

     ...
         <endlist id="end-lid">
           <next-volume>2</next-volume>
           <play-item ref="change-disc-segitem"/>
         </endlist>
     ...
       </pbc>
     </videocd>
     ...


File: vcdimager.info,  Node: Examples,  Next: Tips and Hints,  Prev: Video CD XML Description,  Up: Top

Examples
********

   The general procedure for creating a (Super) Video CD involves the
following steps:

  1. Get an idea for a Video CD.

  2. Collecting, creating or encoding the required MPEG items for
     inclusion on the Video CD.

  3. Design some sophisticated PBC flow and create a XML description
     reflecting that or use `vcdxgen' to generate a very simple Video
     CD structure.

  4. Let `vcdxbuild' process the XML description created in the
     previous step. If required fix warnings and errors displayed by
     `vcdxbuild'.

  5. Write the created disc image to a CD-R.


   The steps of encoding compliant MPEG program streams are not covered
in this manual.(1)

   The last step, writing to a CD-R, can be accomplished by `cdrdao'(2)
as simple as:

     $ cdrdao write --device 0,5,0 --speed 8 videocd.cue
     Cdrdao version 1.1.5 - (C) Andreas Mueller <andreas@daneb.de>
       SCSI interface library - (C) Joerg Schilling
       L-EC encoding library - (C) Heiko Eissfeldt
       Paranoia DAE library - (C) Monty
     
     Check http://cdrdao.sourceforge.net/drives.html#dt for current driver
     tables.
     
     Using libscg version 'schily-0.5'
     
     0,5,0: YAMAHA CRW8424S	Rev: 1.0j
     Using driver: Generic SCSI-3/MMC - Version 1.2 (options 0x0000)
     
     Starting write at speed 8...
     Pausing 10 seconds - hit CTRL-C to abort.
     Process can be aborted with QUIT signal (usually CTRL-\).
     Executing power calibration...
     Power calibration successful.
     Writing track 01 (mode MODE2_RAW/MODE2_RAW)...
     Writing track 02 (mode MODE2_RAW/MODE2_RAW)...
     Wrote 750 of 750 MB (Buffer 100%).
     Wrote 334544 blocks. Buffer fill min 96%/max 100%.
     Flushing cache...
     Writing finished successfully.
     $

* Menu:

* Simple Multitrack Example::
* Video CD Disassembling::

   ---------- Footnotes ----------

   (1) see `http://mjpeg.sourceforge.net/'

   (2) see `http://cdrdao.sourceforge.net/'


File: vcdimager.info,  Node: Simple Multitrack Example,  Next: Video CD Disassembling,  Prev: Examples,  Up: Examples

Simple Multitrack Example
=========================

   In the following example session, the files `track1.mpg',
`track2.mpg' and `track3.mpg' are mastered into the default output
files `videocd.cue' and `videocd.bin'. The volume label is set to `My
Test VCD'.

     $ vcdimager --iso-volume-label="MY_TEST_VCD" track1.mpg track2 track3.mpg
        INFO: scanning mpeg sequence item #0 for scanpoints...
        INFO: scanning mpeg sequence item #1 for scanpoints...
        INFO: scanning mpeg sequence item #2 for scanpoints...
        INFO: writing track 1 (ISO-9660)...
        INFO: writing track 2, MPEG1, NTSC (352x240/30fps), 1 audio stream...
        INFO: writing track 3, MPEG1, PAL (352x288/25fps), 1 audio stream...
        INFO: writing track 4, MPEG1, NTSC (352x240/30fps), 1 audio stream...
     finished ok, image created with 13626 sectors [03:01.51]
     $

   The same with XML based tools:

     $ vcdxgen --iso-volume-label="MY_TEST_VCD" track1.mpg track2 track3.mpg
     (Super) VideoCD xml description created successfully as `videocd.xml'
     $ vcdxbuild videocd.xml
        INFO: scanning mpeg sequence item #0 for scanpoints...
        INFO: scanning mpeg sequence item #1 for scanpoints...
        INFO: scanning mpeg sequence item #2 for scanpoints...
        INFO: writing track 1 (ISO-9660)...
        INFO: writing track 2, MPEG1, NTSC (352x240/30fps), 1 audio stream...
        INFO: writing track 3, MPEG1, PAL (352x288/25fps), 1 audio stream...
        INFO: writing track 4, MPEG1, NTSC (352x240/30fps), 1 audio stream...
     finished ok, image created with 13626 sectors [03:01.51]
     $


File: vcdimager.info,  Node: Video CD Disassembling,  Prev: Simple Multitrack Example,  Up: Examples

Video CD Disassembling
======================

   The next example show how to extract the PBC information and the
MPEG streams contained in the image file `videocd.bin' (the resulting
streams are stored in files named `avseq##.mpg' with `##' being the
track number, starting with 0).

     $ vcdxrip -b videocd.bin
        INFO: detected extended VCD2.0 PBC files
        INFO: extracting avseq00.mpg... (start lsn 450 (+4739))
        INFO: extracting avseq01.mpg... (start lsn 5189 (+4160))
        INFO: extracting avseq02.mpg... (start lsn 9349 (+4277))
        INFO: writing xml description to `videocd.xml'...
        INFO: done
     $


File: vcdimager.info,  Node: Tips and Hints,  Next: Character Sets,  Prev: Examples,  Up: Top

Tips and Hints
**************

* Menu:

* SVCD Player Compatibility::
* Fast Forward & Fast Rewind with Super Video CDs::


File: vcdimager.info,  Node: SVCD Player Compatibility,  Next: Fast Forward & Fast Rewind with Super Video CDs,  Prev: Tips and Hints,  Up: Tips and Hints

SVCD Player Compatibility
=========================

   If you have problems with your playing device failing to _detect_ a
created SVCD, you can may the following things (some of the advices
below apply to VCDs as well):

  1. Take warnings serious! If there were warnings issued during the
     image building process, chances are the problems are related to
     them.

  2. Make sure the SVCD is physically OK (e.g., analyze the disc with
     `vcddebug' or try it on some other playing device).

  3. Try creating the SVCD by enabling the `svcd vcd30 mpegav' and
     `svcd vcd30 entrysvd' options.

  4. Add an empty `/SEGMENT' directory, if it isn't created due to
     inclusion of SPIs.

  5. If you have confusing time readings for discs with more than one
     video track, you might need to use the `svcd vcd30 tracksvd'
     option.



File: vcdimager.info,  Node: Fast Forward & Fast Rewind with Super Video CDs,  Prev: SVCD Player Compatibility,  Up: Tips and Hints

Fast Forward & Fast Rewind with Super Video CD's
================================================

   Because of the VBR encoding of the MPEG-2 streams on SVCDs, there's
no fixed relation between sector index and playing time. If scanning
doesn't work with your playing device it can be caused by:

   * The playing device does not support FF/RW with SVCDs.(1)

   * The MPEG-2 streams playing time longer that can be handled by the
     playing device.(2)

   * The MPEG-2 stream does not include the mandatory scan information
     data or when included, it doesn't follow the specification(3).
     *Note Scan Information Data::.

   * Some playing devices require a sequence header before each GOP
     header. *Note Access Point Sectors::.


   ---------- Footnotes ----------

   (1) Sometimes upgrading the player firmware may help.

   (2) Some devices don't support programs with a playing time of over
about 40 minutes. This is to be seen as bug or limitation of the
firmware, as SVCD's can have programs with up to 100 minute playing
times.

   (3) `libvcd' warns if scan information is missing or syntactically
wrong.


File: vcdimager.info,  Node: Character Sets,  Next: Acronym Expansions,  Prev: Tips and Hints,  Up: Top

Character Sets
**************

* Menu:

* ISO646 d-Characters::
* ISO646 a-Characters::


File: vcdimager.info,  Node: ISO646 d-Characters,  Next: ISO646 a-Characters,  Prev: Character Sets,  Up: Character Sets

ISO646 d-Characters
===================

       | 0 1 2 3 4 5 6 7
     --+-----------------
     0 |       0   P
     1 |       1 A Q
     2 |       2 B R
     3 |       3 C S
     4 |       4 D T
     5 |       5 E U
     6 |       6 F V
     7 |       7 G W
     8 |       8 H X
     9 |       9 I Y
     a |         J Z
     b |         K
     c |         L
     d |         M
     e |         N
     f |         O _


File: vcdimager.info,  Node: ISO646 a-Characters,  Prev: ISO646 d-Characters,  Up: Character Sets

ISO646 a-Characters
===================

       | 0 1 2 3 4 5 6 7
     --+-----------------
     0 |       0   P
     1 |     ! 1 A Q
     2 |     " 2 B R
     3 |       3 C S
     4 |       4 D T
     5 |     % 5 E U
     6 |     & 6 F V
     7 |     ' 7 G W
     8 |     ( 8 H X
     9 |     ) 9 I Y
     a |     * : J Z
     b |     + ; K
     c |     , < L
     d |     - = M
     e |     . > N
     f |     / ? O _


File: vcdimager.info,  Node: Acronym Expansions,  Next: GNU General Public License,  Prev: Character Sets,  Up: Top

Glossary
********

APS
     access point sector

CBR
     constant bit rate

CD
     compact disc

CD-DA
     CD digital audio

CD-ROM
     CD read only memory

DVD
     digital versatile disc

DVD-V
     DVD for video

DVD-A
     DVD for audio

FSF
     free software foundation, `http://www.fsf.org/'

GNU
     GNU is not UNIX, `http://www.gnu.org/'

MPEG
     movie picture experts group

OGT
     overlay graphics & text

PEM
     program end marker

PBC
     playback control

PSD
     play sequence descriptor

PVD
     primary volume descriptor

SVCD
     Super VCD

VBR
     variable bit rate

VCD
     Video CD

XML
     extensible markup language, `http://www.w3.org/XML/'

XSVCD
     eXtended SVCD

XVCD
     eXtended VCD


File: vcdimager.info,  Node: GNU General Public License,  Next: GNU Free Documentation License,  Prev: Acronym Expansions,  Up: Top

GNU General Public License
**************************

                         Version 2, June 1991

     Copyright (C) 1989, 1991 Free Software Foundation, Inc.
     59 Temple Place - Suite 330, Boston, MA  02111-1307, USA
     
     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

Preamble
========

   The licenses for most software are designed to take away your
freedom to share and change it.  By contrast, the GNU General Public
License is intended to guarantee your freedom to share and change free
software--to make sure the software is free for all its users.  This
General Public License applies to most of the Free Software
Foundation's software and to any other program whose authors commit to
using it.  (Some other Free Software Foundation software is covered by
the GNU Library General Public License instead.)  You can apply it to
your programs, too.

   When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
this service if you wish), that you receive source code or can get it
if you want it, that you can change the software or use pieces of it in
new free programs; and that you know you can do these things.

   To protect your rights, we need to make restrictions that forbid
anyone to deny you these rights or to ask you to surrender the rights.
These restrictions translate to certain responsibilities for you if you
distribute copies of the software, or if you modify it.

   For example, if you distribute copies of such a program, whether
gratis or for a fee, you must give the recipients all the rights that
you have.  You must make sure that they, too, receive or can get the
source code.  And you must show them these terms so they know their
rights.

   We protect your rights with two steps: (1) copyright the software,
and (2) offer you this license which gives you legal permission to copy,
distribute and/or modify the software.

   Also, for each author's protection and ours, we want to make certain
that everyone understands that there is no warranty for this free
software.  If the software is modified by someone else and passed on, we
want its recipients to know that what they have is not the original, so
that any problems introduced by others will not reflect on the original
authors' reputations.

   Finally, any free program is threatened constantly by software
patents.  We wish to avoid the danger that redistributors of a free
program will individually obtain patent licenses, in effect making the
program proprietary.  To prevent this, we have made it clear that any
patent must be licensed for everyone's free use or not licensed at all.

   The precise terms and conditions for copying, distribution and
modification follow.

    TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
  0. This License applies to any program or other work which contains a
     notice placed by the copyright holder saying it may be distributed
     under the terms of this General Public License.  The "Program",
     below, refers to any such program or work, and a "work based on
     the Program" means either the Program or any derivative work under
     copyright law: that is to say, a work containing the Program or a
     portion of it, either verbatim or with modifications and/or
     translated into another language.  (Hereinafter, translation is
     included without limitation in the term "modification".)  Each
     licensee is addressed as "you".

     Activities other than copying, distribution and modification are
     not covered by this License; they are outside its scope.  The act
     of running the Program is not restricted, and the output from the
     Program is covered only if its contents constitute a work based on
     the Program (independent of having been made by running the
     Program).  Whether that is true depends on what the Program does.

  1. You may copy and distribute verbatim copies of the Program's
     source code as you receive it, in any medium, provided that you
     conspicuously and appropriately publish on each copy an appropriate
     copyright notice and disclaimer of warranty; keep intact all the
     notices that refer to this License and to the absence of any
     warranty; and give any other recipients of the Program a copy of
     this License along with the Program.

     You may charge a fee for the physical act of transferring a copy,
     and you may at your option offer warranty protection in exchange
     for a fee.

  2. You may modify your copy or copies of the Program or any portion
     of it, thus forming a work based on the Program, and copy and
     distribute such modifications or work under the terms of Section 1
     above, provided that you also meet all of these conditions:

       a. You must cause the modified files to carry prominent notices
          stating that you changed the files and the date of any change.

       b. You must cause any work that you distribute or publish, that
          in whole or in part contains or is derived from the Program
          or any part thereof, to be licensed as a whole at no charge
          to all third parties under the terms of this License.

       c. If the modified program normally reads commands interactively
          when run, you must cause it, when started running for such
          interactive use in the most ordinary way, to print or display
          an announcement including an appropriate copyright notice and
          a notice that there is no warranty (or else, saying that you
          provide a warranty) and that users may redistribute the
          program under these conditions, and telling the user how to
          view a copy of this License.  (Exception: if the Program
          itself is interactive but does not normally print such an
          announcement, your work based on the Program is not required
          to print an announcement.)

     These requirements apply to the modified work as a whole.  If
     identifiable sections of that work are not derived from the
     Program, and can be reasonably considered independent and separate
     works in themselves, then this License, and its terms, do not
     apply to those sections when you distribute them as separate
     works.  But when you distribute the same sections as part of a
     whole which is a work based on the Program, the distribution of
     the whole must be on the terms of this License, whose permissions
     for other licensees extend to the entire whole, and thus to each
     and every part regardless of who wrote it.

     Thus, it is not the intent of this section to claim rights or
     contest your rights to work written entirely by you; rather, the
     intent is to exercise the right to control the distribution of
     derivative or collective works based on the Program.

     In addition, mere aggregation of another work not based on the
     Program with the Program (or with a work based on the Program) on
     a volume of a storage or distribution medium does not bring the
     other work under the scope of this License.

  3. You may copy and distribute the Program (or a work based on it,
     under Section 2) in object code or executable form under the terms
     of Sections 1 and 2 above provided that you also do one of the
     following:

       a. Accompany it with the complete corresponding machine-readable
          source code, which must be distributed under the terms of
          Sections 1 and 2 above on a medium customarily used for
          software interchange; or,

       b. Accompany it with a written offer, valid for at least three
          years, to give any third party, for a charge no more than your
          cost of physically performing source distribution, a complete
          machine-readable copy of the corresponding source code, to be
          distributed under the terms of Sections 1 and 2 above on a
          medium customarily used for software interchange; or,

       c. Accompany it with the information you received as to the offer
          to distribute corresponding source code.  (This alternative is
          allowed only for noncommercial distribution and only if you
          received the program in object code or executable form with
          such an offer, in accord with Subsection b above.)

     The source code for a work means the preferred form of the work for
     making modifications to it.  For an executable work, complete
     source code means all the source code for all modules it contains,
     plus any associated interface definition files, plus the scripts
     used to control compilation and installation of the executable.
     However, as a special exception, the source code distributed need
     not include anything that is normally distributed (in either
     source or binary form) with the major components (compiler,
     kernel, and so on) of the operating system on which the executable
     runs, unless that component itself accompanies the executable.

     If distribution of executable or object code is made by offering
     access to copy from a designated place, then offering equivalent
     access to copy the source code from the same place counts as
     distribution of the source code, even though third parties are not
     compelled to copy the source along with the object code.

  4. You may not copy, modify, sublicense, or distribute the Program
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense or distribute the Program is
     void, and will automatically terminate your rights under this
     License.  However, parties who have received copies, or rights,
     from you under this License will not have their licenses
     terminated so long as such parties remain in full compliance.

  5. You are not required to accept this License, since you have not
     signed it.  However, nothing else grants you permission to modify
     or distribute the Program or its derivative works.  These actions
     are prohibited by law if you do not accept this License.
     Therefore, by modifying or distributing the Program (or any work
     based on the Program), you indicate your acceptance of this
     License to do so, and all its terms and conditions for copying,
     distributing or modifying the Program or works based on it.

  6. Each time you redistribute the Program (or any work based on the
     Program), the recipient automatically receives a license from the
     original licensor to copy, distribute or modify the Program
     subject to these terms and conditions.  You may not impose any
     further restrictions on the recipients' exercise of the rights
     granted herein.  You are not responsible for enforcing compliance
     by third parties to this License.

  7. If, as a consequence of a court judgment or allegation of patent
     infringement or for any other reason (not limited to patent
     issues), conditions are imposed on you (whether by court order,
     agreement or otherwise) that contradict the conditions of this
     License, they do not excuse you from the conditions of this
     License.  If you cannot distribute so as to satisfy simultaneously
     your obligations under this License and any other pertinent
     obligations, then as a consequence you may not distribute the
     Program at all.  For example, if a patent license would not permit
     royalty-free redistribution of the Program by all those who
     receive copies directly or indirectly through you, then the only
     way you could satisfy both it and this License would be to refrain
     entirely from distribution of the Program.

     If any portion of this section is held invalid or unenforceable
     under any particular circumstance, the balance of the section is
     intended to apply and the section as a whole is intended to apply
     in other circumstances.

     It is not the purpose of this section to induce you to infringe any
     patents or other property right claims or to contest validity of
     any such claims; this section has the sole purpose of protecting
     the integrity of the free software distribution system, which is
     implemented by public license practices.  Many people have made
     generous contributions to the wide range of software distributed
     through that system in reliance on consistent application of that
     system; it is up to the author/donor to decide if he or she is
     willing to distribute software through any other system and a
     licensee cannot impose that choice.

     This section is intended to make thoroughly clear what is believed
     to be a consequence of the rest of this License.

  8. If the distribution and/or use of the Program is restricted in
     certain countries either by patents or by copyrighted interfaces,
     the original copyright holder who places the Program under this
     License may add an explicit geographical distribution limitation
     excluding those countries, so that distribution is permitted only
     in or among countries not thus excluded.  In such case, this
     License incorporates the limitation as if written in the body of
     this License.

  9. The Free Software Foundation may publish revised and/or new
     versions of the General Public License from time to time.  Such
     new versions will be similar in spirit to the present version, but
     may differ in detail to address new problems or concerns.

     Each version is given a distinguishing version number.  If the
     Program specifies a version number of this License which applies
     to it and "any later version", you have the option of following
     the terms and conditions either of that version or of any later
     version published by the Free Software Foundation.  If the Program
     does not specify a version number of this License, you may choose
     any version ever published by the Free Software Foundation.

 10. If you wish to incorporate parts of the Program into other free
     programs whose distribution conditions are different, write to the
     author to ask for permission.  For software which is copyrighted
     by the Free Software Foundation, write to the Free Software
     Foundation; we sometimes make exceptions for this.  Our decision
     will be guided by the two goals of preserving the free status of
     all derivatives of our free software and of promoting the sharing
     and reuse of software generally.

                                NO WARRANTY

 11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO
     WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE
     LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
     HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT
     WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT
     NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
     FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE
     QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
     PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY
     SERVICING, REPAIR OR CORRECTION.

 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY
     MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE
     LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL,
     INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR
     INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
     DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU
     OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY
     OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN
     ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

                      END OF TERMS AND CONDITIONS

Appendix: How to Apply These Terms to Your New Programs
=======================================================

   If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

   To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
convey the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

     ONE LINE TO GIVE THE PROGRAM'S NAME AND A BRIEF IDEA OF WHAT IT DOES.
     Copyright (C) YYYY  NAME OF AUTHOR
     
     This program is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.
     
     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.
     
     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

   Also add information on how to contact you by electronic and paper
mail.

   If the program is interactive, make it output a short notice like
this when it starts in an interactive mode:

     Gnomovision version 69, Copyright (C) 19YY NAME OF AUTHOR
     Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
     This is free software, and you are welcome to redistribute it
     under certain conditions; type `show c' for details.

   The hypothetical commands `show w' and `show c' should show the
appropriate parts of the General Public License.  Of course, the
commands you use may be called something other than `show w' and `show
c'; they could even be mouse-clicks or menu items--whatever suits your
program.

   You should also get your employer (if you work as a programmer) or
your school, if any, to sign a "copyright disclaimer" for the program,
if necessary.  Here is a sample; alter the names:

     Yoyodyne, Inc., hereby disclaims all copyright interest in the program
     `Gnomovision' (which makes passes at compilers) written by James Hacker.
     
     SIGNATURE OF TY COON, 1 April 1989
     Ty Coon, President of Vice

   This General Public License does not permit incorporating your
program into proprietary programs.  If your program is a subroutine
library, you may consider it more useful to permit linking proprietary
applications with the library.  If this is what you want to do, use the
GNU Library General Public License instead of this License.

